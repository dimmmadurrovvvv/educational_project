
# 2.1 Запрос у пользователя даты рождения,
# 2.2 Определение дня недели для этой даты,
# 2.3 Проверка, является ли год високосным,
# 2.4 Определение возраста пользователя на текущий момент,
# 2.5 Вывод даты рождения "звёздочками" (как на электронном табло).
#
# Для работы требуется модуль datetime (стандартный в Python).
# ---------------------------------------

import datetime

# Словарь, в котором для каждой цифры (в виде строки '0', '1', ..., '9')
# хранится её "ASCII-арт" из звёздочек
digits_map = {
    '0': [
        " *** ",
        "*   *",
        "*   *",
        "*   *",
        " *** "
    ],
    '1': [
        "  *  ",
        " **  ",
        "  *  ",
        "  *  ",
        " *** "
    ],
    '2': [
        " *** ",
        "*   *",
        "   * ",
        "  *  ",
        "*****"
    ],
    '3': [
        " *** ",
        "*   *",
        "   **",
        "*   *",
        " *** "
    ],
    '4': [
        "*   *",
        "*   *",
        "*****",
        "    *",
        "    *"
    ],
    '5': [
        "*****",
        "*    ",
        " *** ",
        "    *",
        " *** "
    ],
    '6': [
        " *** ",
        "*    ",
        "**** ",
        "*   *",
        " *** "
    ],
    '7': [
        "*****",
        "   * ",
        "  *  ",
        " *   ",
        " *   "
    ],
    '8': [
        " *** ",
        "*   *",
        " *** ",
        "*   *",
        " *** "
    ],
    '9': [
        " *** ",
        "*   *",
        " ****",
        "    *",
        " *** "
    ]
}

def input_birthdate():
    """
    Функция для ввода даты рождения пользователя.
    
    Возвращает кортеж (day, month, year), где
    day, month, year — целые числа.
    """
    day = int(input("Введите день рождения (число): "))
    month = int(input("Введите месяц рождения (число): "))
    year = int(input("Введите год рождения (число): "))
    return day, month, year

def get_day_of_week(day, month, year):
    """
    Функция, определяющая день недели (на русском языке)
    по заданным числу, месяцу и году.
    
    Возвращает строку с названием дня недели.
    Пример: 'Понедельник', 'Вторник', ...
    """
    date_obj = datetime.date(year, month, day)
    # weekday() возвращает число от 0 (понедельник) до 6 (воскресенье)
    weekday_num = date_obj.weekday()
    weekdays_ru = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"]
    return weekdays_ru[weekday_num]

def is_leap_year(year):
    """
    Функция, определяющая, является ли год високосным.
    (По григорианскому календарю.)
    
    Возвращает True, если год високосный, иначе False.
    """
    # Условие високосности:
    # - год делится на 4 => потенциально високосный;
    # - но если год делится на 100, то он НЕ високосный;
    # - однако если год делится на 400, то снова високосный.
    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)

def calculate_age(day, month, year):
    """
    Функция для расчёта текущего возраста пользователя по дате рождения.
    Использует текущую системную дату (datetime.date.today()).
    
    Возвращает целое число лет.
    """
    today = datetime.date.today()  # сегодняшняя дата
    age = today.year - year        # базовое вычисление
    
    # Если день рождения в этом году ещё не наступил, уменьшаем возраст на 1
    if (today.month, today.day) < (month, day):
        age -= 1
    
    return age

def print_date_star_style(day, month, year):
    """
    Функция для вывода даты рождения в стиле "электронного табло"
    звёздочками.
    
    Формат вывода: "дд мм гггг", где каждая цифра выводится
    в 5 строках высотой с использованием символов '*'.
    """
    # Преобразуем день, месяц и год в строки с ведущими нулями
    # (например, 7 -> '07', 5 -> '05', 1990 -> '1990')
    day_str = f"{day:02d}"
    month_str = f"{month:02d}"
    year_str = f"{year:04d}"
    
    # Сформируем итоговую строку вида "дд мм гггг"
    date_str = day_str + " " + month_str + " " + year_str
    
    # Инициализируем 5 пустых строк, т.к. каждая цифра рисуется в 5 строк высотой
    lines = [""] * 5
    
    # Проходим по каждому символу (цифре или пробелу) в итоговой строке
    for char in date_str:
        if char == " ":
            # Если символ — пробел, добавим отступ между цифрами
            for i in range(5):
                lines[i] += "  "  # два пробела
        else:
            # Получаем шаблон (ASCII-арт) для текущей цифры
            digit_pattern = digits_map[char]
            # Добавляем этот рисунок к каждой из 5 строк
            for i in range(5):
                lines[i] += digit_pattern[i]
            # Добавим пробел как разделитель (необязательно, но удобнее читать)
            for i in range(5):
                lines[i] += " "
    
    # Выводим накопленные 5 строк построчно
    for line in lines:
        print(line)

# ------------------------------------------------------
# Основной сценарий работы, если запускаем этот скрипт напрямую
# ------------------------------------------------------
if __name__ == "__main__":
    # 2.1 Запрос даты рождения
    day, month, year = input_birthdate()
    
    # 2.2 Определение дня недели для введённой даты
    dw = get_day_of_week(day, month, year)
    print(f"\nДень недели рождения: {dw}")
    
    # 2.3 Проверка, был ли год високосным
    leap = is_leap_year(year)
    if leap:
        print(f"Год {year} был високосным.")
    else:
        print(f"Год {year} был обычным.")
    
    # 2.4 Определение текущего возраста пользователя
    age = calculate_age(day, month, year)
    print(f"Сейчас вам {age} лет.")
    
    # 2.5 Вывод даты рождения в формате "дд мм гггг" звёздочками (ASCII-арт)
    print("\nСтилизованная дата рождения (дд мм гггг):")
    print_date_star_style(day, month, year)
